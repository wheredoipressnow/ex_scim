# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: ExScim Multi-Project Elixir CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  test:
    name: Test ${{ matrix.project }}
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        project:
          - ex_scim
          - ex_scim_ecto
          - ex_scim_phoenix
          - ex_scim_client
          - examples/provider

    steps:
      - uses: actions/checkout@v4
    
      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: '1.18.2' # [Required] Define the Elixir version
          otp-version: '27.0'      # [Required] Define the Erlang/OTP version
    
      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ matrix.project }}/deps
            ${{ matrix.project }}/_build
          key: ${{ runner.os }}-mix-${{ matrix.project }}-${{ hashFiles(format('{0}/mix.lock', matrix.project)) }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ matrix.project }}-
    
      - name: Install dependencies
        working-directory: ${{ matrix.project }}
        run: mix deps.get
    
      - name: Compile project
        working-directory: ${{ matrix.project }}
        run: MIX_ENV=test mix compile --warnings-as-errors
    
      - name: Run tests
        working-directory: ${{ matrix.project }}
        run: mix test


